
{
  "content": "n class=\"pln\"> in </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"pun\">...;</span><span class=\"pln\">\r\n</span><span class=\"kwd\">try</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\r\n    </span><span class=\"kwd\">try</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\r\n        </span><span class=\"pun\">...;</span><span class=\"pln\">\r\n    </span><span class=\"pun\">}</span><span class=\"pln\">\r\n    </span><span class=\"kwd\">finally</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\r\n        in</span><span class=\"pun\">.</span><span class=\"pln\">close</span><span class=\"pun\">();</span><span class=\"pln\">\r\n    </span><span class=\"pun\">}</span><span class=\"pln\">\r\n</span><span class=\"pun\">}</span><span class=\"pln\">\r\n</span><span class=\"kwd\">catch</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"typ\">IOException</span><span class=\"pln\"> e</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\r\n    </span><span class=\"pun\">...</span><span class=\"pln\">\r\n</span><span class=\"pun\">}</span></code></pre>\r\n\r\n<h4 id=\"use-the-try-with-resouces-statement-in-java-se-7\">Use the try-with-resouces statement in Java SE 7</h4>\r\n\r\n<pre class=\"prettyprint prettyprinted\"><code class=\"language-java\"><span class=\"kwd\">try</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"typ\">Scanner</span><span class=\"pln\"> in </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Scanner</span><span class=\"pun\">(</span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">FileInputStream</span><span class=\"pun\">(</span><span class=\"str\">\"/Users/ralph/dev/data\"</span><span class=\"pun\">));</span><span class=\"pln\">\r\n        </span><span class=\"typ\">PrintWriter</span><span class=\"pln\"> out</span><span class=\"pun\">=</span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">PrintWriter</span><span class=\"pun\">(</span><span class=\"str\">\"/Users/ralph/dev/out.txt\"</span><span class=\"pun\">))</span><span class=\"pln\">\r\n</span><span class=\"pun\">{</span><span class=\"pln\">\r\n    </span><span class=\"kwd\">while</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">in</span><span class=\"pun\">.</span><span class=\"pln\">hasNext</span><span class=\"pun\">())</span><span class=\"pln\">\r\n        out</span><span class=\"pun\">.</span><span class=\"pln\">println</span><span class=\"pun\">(</span><span class=\"pln\">in</span><span class=\"pun\">.</span><span class=\"pln\">next</span><span class=\"pun\">().</span><span class=\"pln\">toUpperCase</span><span class=\"pun\">());</span><span class=\"pln\">\r\n</span><span class=\"pun\">}</span></code></pre>\r\n\r\n<blockquote>\r\n  <p>Note the type of Resources here must implement the <code>AutoCloseable</code> interface and when the try block exits, the <br>\r\n  <code>res.close()</code> method is called automatically</p>\r\n</blockquote>\r\n\r\n<p>Use the following types and methods to analyze call stacks</p>\r\n\r\n<ul>\r\n<li>Throwable <br>\r\n<ul><li>StackTraceElement[] getStackTrace()</li>\r\n<li>void addSuppressed(Throwable t)</li>\r\n<li>Throwable[] getSuppresssed()</li></ul></li>\r\n<li>Exception</li>\r\n<li>RuntimeException</li>\r\n<li>StackTraceElement <br>\r\n<ul><li>getFileName()</li>\r\n<li>getClassName()</li>\r\n<li>getLineNumer()</li></ul></li>\r\n</ul>\r\n\r\n<h4 id=\"best-practices-using-exceptions\">Best practices using Exceptions</h4>\r\n\r\n<ul>\r\n<li>Exceptions are slow. Do not use when unnecessary. Use exceptions for exceptional circumstances.</li>\r\n<li>Do not micromanage exceptions with many try-catch blocks. Wrap normal processing code with one block and separate error handling from normal code</li>\r\n<li>Handle exceptions exceptions. Do not simply silent them with empty catch blocks.</li>\r\n<li>Throw early and catch late. Which means through whenever exceptional conditions detected and pass on till the right place to handle it.</li>\r\n</ul>\r\n\r\n<h3 id=\"assertions\">Assertions</h3>\r\n\r\n<p>two forms:</p>\r\n\r\n<ul>\r\n<li><code>assert condition;</code></li>\r\n<li><code>assert condition : expression;</code></li>\r\n</ul>\r\n\r\n<p>use the -ea and -da flags to enable and disable assertions when starting up JVM. there are also methods in ClassLoader to programmatically enable and disable assertions.</p>\r\n\r\n<h4 id=\"so-when-to-use-exceptions-and-when-to-use-assertions\">So when to use exceptions and when to use assertions?</h4>\r\n\r\n<ul>\r\n<li>assertions are meant to be fatal</li>\r\n<li>assertions are used to detect fatal error conditions during <strong>development and testing</strong>.</li>\r\n<li>whatever used, it should be consistent with the contract, say javadoc</li>\r\n<li>use assertions for documenting assumptions</li>\r\n</ul>\r\n\r\n<h3 id=\"logging\">Logging</h3>\r\n\r\n<ul>\r\n<li>levels <br>\r\n<ul><li>SEVERE</li>\r\n<li>WARNING</li>\r\n<li>INFO</li>\r\n<li>CONFIG</li>\r\n<li>FINE</li>\r\n<li>FINER</li>\r\n<li>FINEST</li></ul></li>\r\n<li>handlers</li>\r\n<li>filters</li>\r\n<li>formats</li>\r\n<li>hierarchies</li>\r\n</ul>\r\n\r\n<p>If JVM optimizes execution, accurate call information may not be available. <code>logp</code> is used to give precise location of the calling class and method.</p>\r\n\r\n<blockquote>\r\n  <p>Log exceptions before being thrown.</p>\r\n</blockquote>\r\n\r\n<p>default configuration file is <code>jre/lib/logging.properties</code></p>\r\n\r\n<p>by default, ConsoleHandler is used and logger will send records to System.err stream.</p>\r\n\r\n<h3 id=\"debugging-tips\">Debugging tips</h3>\r\n\r\n<p>Use logging proxies</p>\r\n\r\n<pre class=\"prettyprint prettyprinted\"><code class=\"language-java\"><span class=\"typ\">Random</span><span class=\"pln\"> generator </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">new</span><span class=\"pln\"> </span><span class=\"typ\">Random</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\r\n    </span><span class=\"kwd\">public</span><span class=\"pln\"> </span><span class=\"kwd\">double</span><span class=\"pln\"> nextDouble</span><span class=\"pun\">()</span><span class=\"pln\"> </span><span class=\"pun\">{</span><span class=\"pln\">\r\n        </span><span class=\"kwd\">double</span><span class=\"pln\"> result </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"kwd\">super</span><span class=\"pun\">.</span><span class=\"pln\">nextDouble</span><span class=\"pun\">();</span><span class=\"pln\">\r\n        </span><span class=\"typ\">Logger</span><span class=\"pun\">.</span><span class=\"pln\">getGlobal</span><span class=\"pun\">().</span><span class=\"pln\">info</span><span class=\"pun\">(</span><span class=\"str\">\"nextDouble: \"</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> result</span><span class=\"pun\">);</span><span class=\"pln\">\r\n        </span><span class=\"kwd\">return</span><span class=\"pln\"> result</span><span class=\"pun\">;</span><span class=\"pln\">\r\n    </span><span class=\"pun\">}</span><span class=\"pln\">\r\n</span><span class=\"pun\">}</span></code></pre>\r\n\r\n<p>User <code>Thread.dumpStack()</code> to get a stack trace.</p>\r\n\r\n<h2 id=\"chap-12-generic-programming\">Chap 12 - Generic Programming</h2>\r\n\r\n<p>Generics were introduced in Java SE 5.0 which is the biggest change. Before introducing generic classes, generic programming was achieved with inheritance which is error prone.</p>\r\n\r\n<p>In Java SE 7, diamond operator was introduced to omit unnecessary types.</p>", 
  "downvote": 0, 
  "id": 7, 
  "tag_id": 7, 
  "tagname": "books", 
  "title": "Reading Note Test", 
  "upvote": 1
}